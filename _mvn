#compdef mvn mvnDebug

local curcontext="$curcontext" state line cmds ret=1

_arguments -C \
  '(- 1 *)'{-h,--help}'[Display help information]' \
  '(- 1 *)'{-v,--version}'[Display version information]' \
  '(- 1 *)'{-emp,--encrypt-master-password}'[Encrypt master security password]' \
  '(- 1 *)'{-ep,--encrypt-password}'[Encrypt server password]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -B --batch-mode)'{-B,--batch-mode}'[Run in non-interactive (batch) mode]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -V --show-version)'{-V,--show-version}'[Display version information WITHOUT stopping build]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -q --quiet -X --debug)'{-q,--quiet}'[Quiet output - only show errors]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -X --debug -q --quiet)'{-X,--debug}'[Produce execution debug output]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -N --non-recursive)'{-N,--non-recursive}'[Do not recurse into sub-projects]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -C --strict-checksums -c --lax-checksums)'{-C,--strict-checksums}'[Fail the build if checksums don'\''t match]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -c --lax-checksums -C --strict-checksums)'{-c,--lax-checksums}'[Warn if checksums don'\''t match]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -e --errors)'{-e,--errors}'[Produce execution error messages]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -f --file)'{-f,--file}'[Force the use of an alternate POM file.]:file:->file' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -l --log-file)'{-l,--log-file}'[Log file to where all build output will go.]:log-file:->log-file' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -s --settings)'{-s,--settings}'[Alternate path for the user settings file]:settings:->settings' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -gs --global-settings)'{-gs,--global-settings}'[Alternate path for the global settings file]:global-settings:->global-settings' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -fae --fail-at-end -ff --fail-fast -fn --fail-never)'{-fae,--fail-at-end}'[Only fail the build afterwards; allow all non-impacted builds to continue]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -ff --fail-fast -fae --fail-at-end -fn --fail-never)'{-ff,--fail-fast}'[Stop at first failure in reactorized builds]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -fn --fail-never -fae --fail-at-end -ff --fail-fast)'{-fn,--fail-never}'[NEVER fail the build, regardless of project result]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -P --activate-profiles)'{-P,--activate-profiles}'[Comma-delimited list of profiles to activate]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -pl --projects)'{-pl,--projects}'[Build specified reactor projects instead of all projects. A project can be specified by '\['groupId'\]':artifactId or by its relative path.]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -am --also-make)'{-am,--also-make}'[If project list is specified, also build projects required by the list]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -amd --also-make-dependents)'{-amd,--also-make-dependents}'[If project list is specified, also build projects that depend on projects on the list]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -rf --resume-from)'{-rf,--resume-from}'[Resume reactor from specified project]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -T --threads)'{-T,--threads}'[Thread count, for instance 2.0C where C is core multiplied]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -t --toolchains)'{-t,--toolchains}'[Alternate path for the user toolchains file]:toolchains:->toolchains' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -o --offline -U --update-snapshots -nsu --no-snapshot-updates)'{-o,--offline}'[Work offline]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -U --update-snapshots -nsu --no-snapshot-updates -o --offline)'{-U,--update-snapshots}'[Forces a check for updated releases and snapshots on remote repositories]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password -nsu --no-snapshot-updates -U --update-snapshots -o --offline)'{-nsu,--no-snapshot-updates}'[Supress SNAPSHOT updates]' \
  '(-h --help -v --version -ep --encrypt-password -emp --encrypt-master-password)'{-D,--define}'[Define a system property]' \
  '*: :->args' \
  && ret=0

case "$state" in
  file)
    _wanted files expl file _files -g '*pom*\.xml*' && ret=0
  ;;
  settings)
    _wanted settings expl settings _files -g '*settings*\.xml*' && ret=0
  ;;
  global-settings)
    _wanted global-settings expl global-settings _files -g '*settings*\.xml*' && ret=0
  ;;
  log-file)
    _wanted log-files expl log-file _files && ret=0
  ;;
  toolchains)
    _wanted toolchains expl toolchains _files && ret=0
  ;;
  args)
    _alternative \
      'phases:phase:((pre-clean\:executes\ processes\ needed\ prior\ to\ the\ actual\ project\ cleaning. \
                      clean\:remove\ all\ files\ generated\ by\ the\ previous\ build. \
                      post-clean\:executes\ processes\ needed\ to\ finalize\ the\ project\ cleaning. \
                      validate\:validate\ the\ project\ is\ correct\ and\ all\ necessary\ information\ is\ available. \
                      initialize\:initialize\ build\ state,\ e.g.\ set\ properties\ or\ create\ directories. \
                      generate-sources\:generate\ any\ source\ code\ for\ inclusion\ in\ compilation. \
                      process-sources\:process\ the\ source\ code,\ for\ example\ to\ filter\ any\ values. \
                      generate-resources\:generate\ resources\ for\ inclusion\ in\ the\ package. \
                      process-resources\:copy\ and\ process\ the\ resources\ into\ the\ destination\ directory,\ ready\ for\ packaging. \
                      compile\:compile\ the\ source\ code\ of\ the\ project. \
                      process-classes\:post-process\ the\ generated\ files\ from\ compilation,\ for\ example\ to\ do\ bytecode\ enhancement\ on\ Java\ classes. \
                      generate-test-sources\:generate\ any\ test\ source\ code\ for\ inclusion\ in\ compilation. \
                      process-test-sources\:process\ the\ test\ source\ code,\ for\ example\ to\ filter\ any\ values. \
                      generate-test-resources\:create\ resources\ for\ testing. \
                      process-test-resources\:copy\ and\ process\ the\ resources\ into\ the\ test\ destination\ directory. \
                      test-compile\:compile\ the\ test\ source\ code\ into\ the\ test\ destination\ directory. \
                      process-test-classes\:post-process\ the\ generated\ files\ from\ test\ compilation,\ for\ example\ to\ do\ bytecode\ enhancement\ on\ Java\ classes.\ For\ Maven\ 2.0.5\ and\ above. \
                      test\:run\ tests\ using\ a\ suitable\ unit\ testing\ framework.\ These\ tests\ should\ not\ require\ the\ code\ be\ packaged\ or\ deployed. \
                      prepare-package\:perform\ any\ operations\ necessary\ to\ prepare\ a\ package\ before\ the\ actual\ packaging.\ This\ often\ results\ in\ an\ unpacked,\ processed\ version\ of\ the\ package. \
                      package\:take\ the\ compiled\ code\ and\ package\ it\ in\ its\ distributable\ format,\ such\ as\ a\ JAR. \
                      pre-integration-test\:perform\ actions\ required\ before\ integration\ tests\ are\ executed.\ This\ may\ involve\ things\ such\ as\ setting\ up\ the\ required\ environment. \
                      integration-test\:process\ and\ deploy\ the\ package\ if\ necessary\ into\ an\ environment\ where\ integration\ tests\ can\ be\ run. \
                      post-integration-test\:perform\ actions\ required\ after\ integration\ tests\ have\ been\ executed.\ This\ may\ including\ cleaning\ up\ the\ environment. \
                      verify\:run\ any\ checks\ to\ verify\ the\ package\ is\ valid\ and\ meets\ quality\ criteria. \
                      install\:install\ the\ package\ into\ the\ local\ repository,\ for\ use\ as\ a\ dependency\ in\ other\ projects\ locally. \
                      deploy\:done\ in\ an\ integration\ or\ release\ environment,\ copies\ the\ final\ package\ to\ the\ remote\ repository\ for\ sharing\ with\ other\ developers\ and\ projects. \
                      pre-site\:executes\ processes\ needed\ prior\ to\ the\ actual\ project\ site\ generation. \
                      site\:generates\ the\ projects\ site\ documentation. \
                      post-site\:executes\ processes\ needed\ to\ finalize\ the\ site\ generation,\ and\ to\ prepare\ for\ site\ deployment. \
                      site-deploy\:deploys\ the\ generated\ site\ documentation\ to\ the\ specified\ web\ server.))'
  ;;
esac
